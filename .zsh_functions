# vim: foldmethod=marker

stderr() {
    echo "${@}" 1>&2
}

fail() {
    stderr "${1}"
    stderr ""
    stderr "Exiting â€¦"
    exit "${2:-1}"
}

# Search on both snap and apt
apps() {
    snap search $1
    apt search $1
}

# base64 -d
bd() {
    echo "$1" | base64 -d ; echo
}

checksum() {
    echo "$1 $2" > /tmp/hash.txt &&\
        printf 'md5:\n'; md5sum -c /tmp/hash.txt;\
        printf '\n';\
        printf 'sha256:\n'; sha256sum -c /tmp/hash.txt
}

# Copy the contents of a file to the clipboard and put its name in primary
copy() {
    # If WSL
    if [[ "$(uname -r)" =~ .*microsoft.* ]]; then
        cat ${1:?} | /mnt/c/Windows/System32/clip.exe
    else
        cat ${1:?} | xclip -selection clipboard
        echo -n ${1:?} | xclip -selection primary
    fi
}

# Copy path to current working directory
cwd() {
    # If WSL
    if [[ "$(uname -r)" =~ .*microsoft.* ]]; then
        pwd | /mnt/c/Windows/System32/clip.exe
    else
        pwd | xclip -selection clipboard
        pwd | xclip -selection primary
    fi
}

datestamp() {
    date +'%F'
}

# setup kubectl environment
kinit() {
    if $(command -v helm &> /dev/null); then
        source <(helm completion zsh)
    fi
    if $(command -v kubectl &> /dev/null); then
        source <(kubectl completion zsh)
    fi
    if $(command -v minikube &> /dev/null); then
        source <(minikube completion zsh)
    fi
}

m2p() {
    pandoc $1 -s -f gfm -o $1.pdf &&\
    rename md.pdf pdf ./$1.pdf
}

unalias md # Was aliased by OMZ
md() {
  mkdir -p ${1:?} && cd ${1:?}
}

stderr() {
    python -c "import sys; print('$1', file=sys.stderr)"
}

timestamp() {
    date +'%F_%T'
}

title() {
    echo -ne "\033]0;${1}\007"
}

mcd() {
    mkdir -p ${1:?Missing argument to mcd.}
    cd ${1}
}

password() {
  if command -v openssl &> /dev/null; then
    openssl rand -base64 "${1:-32}" | paste -sd '' -
  else
    tr -dc A-Za-z0-9 </dev/urandom | head -c "${1:-32}" ; echo ''
  fi
}

prompt_forever() {
  while true; do
    prompt_once && break
  done
}

prompt_once() {
    if read -q "x?Are you sure? (y/N) "; then
      echo -en "\n"
      true
    else
      echo -en "\n"
      false
    fi
}

# Toggle a theme that is friendly for copying to ```console in Markdown
toggle_md_mode() {
  declare -r PLAIN_PROMPT='$ '
  if [[ "${PROMPT}" == "${PLAIN_PROMPT}" ]]; then
    print '```'
    # Source theme like ~/.oh-my-zsh/oh-my-zsh.sh sources theme {{{
    if [[ -n "$ZSH_THEME" ]]; then
      if is_theme "$ZSH_CUSTOM" "$ZSH_THEME"; then
        source "$ZSH_CUSTOM/$ZSH_THEME.zsh-theme"
      elif is_theme "$ZSH_CUSTOM/themes" "$ZSH_THEME"; then
        source "$ZSH_CUSTOM/themes/$ZSH_THEME.zsh-theme"
      elif is_theme "$ZSH/themes" "$ZSH_THEME"; then
        source "$ZSH/themes/$ZSH_THEME.zsh-theme"
      else
        echo "[oh-my-zsh] theme '$ZSH_THEME' not found"
      fi
    fi
    # }}}
  else
    print_md_console=true
    precmd() {
      print ''
      if [[ "${print_md_console}" == "true" ]]; then
        print '```console'
        print_md_console=false
      fi
    }
    PROMPT="${PLAIN_PROMPT}"
    # Reset everything {{{
    unset return_code
    unset user_host
    unset user_symbol
    unset current_dir
    unset vcs_branch
    unset rvm_ruby
    unset venv_prompt
    unset ZSH_THEME_RVM_PROMPT_OPTIONS
    unset RPROMPT
    unset ZSH_THEME_GIT_PROMPT_PREFIX
    unset ZSH_THEME_GIT_PROMPT_SUFFIX
    unset ZSH_THEME_GIT_PROMPT_DIRTY
    unset ZSH_THEME_GIT_PROMPT_CLEAN
    unset ZSH_THEME_HG_PROMPT_PREFIX
    unset ZSH_THEME_HG_PROMPT_SUFFIX
    unset ZSH_THEME_HG_PROMPT_DIRTY
    unset ZSH_THEME_HG_PROMPT_CLEAN
    unset ZSH_THEME_RUBY_PROMPT_PREFIX
    unset ZSH_THEME_RUBY_PROMPT_SUFFIX
    unset ZSH_THEME_VIRTUAL_ENV_PROMPT_PREFIX
    unset ZSH_THEME_VIRTUAL_ENV_PROMPT_SUFFIX
    unset ZSH_THEME_VIRTUALENV_PREFIX
    unset ZSH_THEME_VIRTUALENV_SUFFIX
    # }}}
  fi
}
